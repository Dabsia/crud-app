{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Academind\\\\Routing\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Put from './components/Put';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const details = {\n    name,\n    email\n  };\n\n  const onAdd = async () => {\n    await fetch('https://jsonplaceholder.typicode.com/users', {\n      method: 'POST',\n      body: JSON.stringify(details),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => {\n      if (response.status === 201) {\n        console.log('Name is not defeince');\n        return;\n      } else {\n        return response.json();\n      }\n    }).then(data => {\n      setUsers(users => [...users, data]);\n    }).catch(err => console.log(err));\n  };\n\n  const saveUser = e => {\n    e.preventDefault();\n    onAdd(e.target.value, e.target.value);\n  };\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users/').then(response => response.json()).then(json => setUsers(json));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: users.map((user, id) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 51\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: saveUser,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"username\",\n        onChange: e => setName(e.target.value),\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"username\",\n        onChange: e => setEmail(e.target.value),\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Put, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"i7ZmOZIbiFIQSR0KBRZ4WWu3LHA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/user/Desktop/Academind/Routing/src/App.js"],"names":["React","useState","useEffect","Put","App","users","setUsers","name","setName","email","setEmail","details","onAdd","fetch","method","body","JSON","stringify","headers","then","response","status","console","log","json","data","catch","err","saveUser","e","preventDefault","target","value","map","user","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Put from './components/Put';\n\n\nconst App = () => {\n\n  const [users, setUsers] = useState([])\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('')\n  const details = {name, email}\n \n  const onAdd = async () => {\n    await fetch('https://jsonplaceholder.typicode.com/users', {\n    method: 'POST',\n    body: JSON.stringify(details),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  })\n    .then((response) => {\n      if (response.status === 201) {\n          console.log('Name is not defeince')\n          return\n        }\n        else {\n          return response.json()\n        }\n  })\n      .then((data) => {\n        setUsers(users => [...users, data])\n      })\n    .catch(err => console.log(err))\n  };\n\nconst saveUser = e => {\n  e.preventDefault()\n  onAdd(e.target.value, e.target.value)   \n}\n  \n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users/')\n      .then((response) => response.json())\n      .then((json) => setUsers(json));\n    \n  })\n  \n    return (\n      <div>\n        <div>\n          {\n            users.map((user, id) => {\n              return (\n                <div key={id}>\n                  <span>{user.name}</span>\n                  <span>{ user.email}</span><br /><br />\n                </div>\n              )\n            })\n          }\n        </div>\n\n    <form onSubmit={saveUser}>\n      <input type='text' placeholder='username' onChange={e => setName(e.target.value)} value={ name} />\n      <input type='email' placeholder='username' onChange={e => setEmail(e.target.value)} value={email} />\n      <button>Save</button>\n    </form>\n    \n    <Put/>\n    </div>\n  )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}